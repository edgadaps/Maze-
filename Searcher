public class Searcher{
	static String[] abc = {"b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","r","s","t","u","v","z"};
	int[] n = new int[4];
	int h,j;
	int row;
	int col;
	public int newCol,newRow;
	public String newPath;
	boolean z;
	String path;
	int pn;
	public Searcher(int r, int c, String p){
		Path.searchers++;
		this.row = r;
		this.col = c;
		this.path = p;
		 System.out.println("SEARCHER STARTING VALUES:"+row+" "+this.col+" "+pn);
		this.search();
	}
	
	public void search(){
		
		int[] pa = new int[2];

		while(true){
			
			System.out.println("SEARCHER NEW ITERATION:"+this.row+" "+this.col+" "+pn+" "+n[0]+" "+n[1]+" "+n[2]+" "+n[3]);
			
			if(this.row==Path.r-1 && this.col==Path.c-1){
				System.out.println("\n\nDONE\n\n");
				System.out.println(String.valueOf(Thread.currentThread()));
				System.out.println(this.path);
				System.exit(0);
			}
			
			Path.l[this.row][this.col] = 1;
			
			if (this.row+1<Path.r && 
					Path.l[this.row+1][this.col] == 0){
				System.out.println("n[0]=1");
				pn++;
				n[0]=1;
				pa[0]=this.row+1;
				pa[1]=this.col;
			}
			if (this.row>0 &&
					Path.l[this.row-1][this.col] == 0){
				System.out.println("n[1]=1");
				pn++;
				n[1]=1;
			pa[0]=this.row-1;
			pa[1]=this.col;
			}
			if (this.col>0 &&
					Path.l[this.row][this.col-1] == 0){
				System.out.println("n[2]=1");
				pn++;
				n[2]=1; 
			pa[0]=this.row;
			pa[1]=this.col-1;
			}
			if (this.col+1<Path.c && 
					Path.l[this.row][this.col+1] == 0){
				System.out.println("n[3]=1");
				pn++;
				n[3]=1;
			pa[0]=this.row;
			pa[1]=this.col+1;
			}	
			System.out.println(pn+" "+n[0]+" "+n[1]+" "+n[2]+" "+n[3]);
			if (pn>1) {
				
				this.z=true;
				
				if (n[3]==1){
					
					if (this.z){
						h = pa[0];
						j = pa[1];
						this.path = this.path+"("+String.valueOf(h)+","+String.valueOf(j)+") ";
						this.z=false;
					}
					else{
					System.out.println("searcher.create = invoking at "+(this.row)+" "+(this.col+1));
					Path.l[this.row][this.col+1]=1;
					Searcher.create(this.row,this.col+1,this.path);
					}
				}
				
				if (n[2]==1){
					
					if (this.z){
						h = pa[0];
						j = pa[1];
						this.path = this.path+"("+String.valueOf(h)+","+String.valueOf(j)+") ";
						this.z=false;
					}
					else{
					System.out.println("searcher.create = invoking at "+(this.row)+" "+(this.col-1));
					Path.l[this.row][this.col-1]=1;
					Searcher.create(this.row,this.col-1,this.path);
					}
				}
				
				if (n[1]==1){	
					if (this.z){
						h = pa[0];
						j = pa[1];
						this.path = this.path+"("+String.valueOf(h)+","+String.valueOf(j)+") ";
						this.z=false;
					}
					else{
					System.out.println("searcher.create = invoking at "+(this.row-1)+" "+this.col);
					Path.l[this.row-1][col]=1;
					Searcher.create(this.row-1,this.col,this.path);
					}
				}
				
				if (n[0]==1){	
					System.out.println("searcher.create = invoking at "+(this.row+1)+" "+this.col);
					Path.l[this.row+1][this.col]=1;
					Searcher.create(this.row+1,this.col,this.path);
				}
				this.row=h;
				this.col=j;
			}
			else if (pn==0){
				System.out.print("Searcher died");
				System.out.println(this.path);
				return;
			}
			else {
				
				//this.path = this.path+"("+String.valueOf(this.row)+","+String.valueOf(this.col)+") ";
				this.row = pa[0];
				this.col = pa[1];	
				this.path = this.path+"("+String.valueOf(this.row)+","+String.valueOf(this.col)+") ";
			}
			System.out.println("END OF ITERATION = "+this.row+" "+this.col+" "+h+" "+j);
			int i,j;
			for (i=0; i<Path.r; i++) {
				for (j=0; j<Path.c; j++)
					System.out.print(Path.l[i][j] + "\t");
				System.out.println();
			}
			pn=0;
			n[0]=0;
			n[1]=0;
			n[2]=0;
			n[3]=0;
		}
	}
	
	static void create(int newRow, int newCol, String newPath){
		
		System.out.println("searcher.create = invoked = "+Path.searchers);	
		
		switch(Path.searchers){
		
		case 1 : Threads b = new Threads();b.initialize(newRow,newCol,newPath);break;
		case 2 : Threads c = new Threads();c.initialize(newRow,newCol,newPath);break;
		case 3 : Threads d = new Threads();d.initialize(newRow,newCol,newPath);break;
		case 4 : Threads e = new Threads();e.initialize(newRow,newCol,newPath);break;
		case 5 : Threads f = new Threads();f.initialize(newRow,newCol,newPath);break;
		case 6 : Threads g = new Threads();g.initialize(newRow,newCol,newPath);break;
		case 7 : Threads h = new Threads();h.initialize(newRow,newCol,newPath);break;
		case 8 : Threads i = new Threads();i.initialize(newRow,newCol,newPath);break;
		case 9 : Threads j = new Threads();j.initialize(newRow,newCol,newPath);break;
		case 10: Threads k = new Threads();k.initialize(newRow,newCol,newPath);break;
		case 11: Threads l = new Threads();l.initialize(newRow,newCol,newPath);break;
		case 12: Threads m = new Threads();m.initialize(newRow,newCol,newPath);break;
		case 13: Threads n = new Threads();n.initialize(newRow,newCol,newPath);break;
		case 14: Threads o = new Threads();o.initialize(newRow,newCol,newPath);break;
		case 15: Threads p = new Threads();p.initialize(newRow,newCol,newPath);break;
		case 16: Threads r = new Threads();r.initialize(newRow,newCol,newPath);break;
		case 17: Threads s = new Threads();s.initialize(newRow,newCol,newPath);break;
		case 18: Threads t = new Threads();t.initialize(newRow,newCol,newPath);break;
		case 19: Threads u = new Threads();u.initialize(newRow,newCol,newPath);break;
		case 20: Threads v = new Threads();v.initialize(newRow,newCol,newPath);break;
		default: System.out.println("Out of searchers");

		}
		
	}
	static void newSearcher(int newRow, int newCol, String newPath){
switch(Path.searchers){
		
		case 1 : Searcher sb = new Searcher(newRow,newCol,newPath);break;
		case 2 : Searcher sc = new Searcher(newRow,newCol,newPath);break;
		case 3 : Searcher sd = new Searcher(newRow,newCol,newPath);break;
		case 4 : Searcher se = new Searcher(newRow,newCol,newPath);break;
		case 5 : Searcher sf = new Searcher(newRow,newCol,newPath);break;
		case 6 : Searcher sg = new Searcher(newRow,newCol,newPath);break;
		case 7 : Searcher sh = new Searcher(newRow,newCol,newPath);break;
		case 8 : Searcher si = new Searcher(newRow,newCol,newPath);break;
		case 9 : Searcher sj = new Searcher(newRow,newCol,newPath);break;
		case 10: Searcher sk = new Searcher(newRow,newCol,newPath);break;
		case 11: Searcher sl = new Searcher(newRow,newCol,newPath);break;
		case 12: Searcher sm = new Searcher(newRow,newCol,newPath);break;
		case 13: Searcher sn = new Searcher(newRow,newCol,newPath);break;
		case 14: Searcher so = new Searcher(newRow,newCol,newPath);break;
		case 15: Searcher sp = new Searcher(newRow,newCol,newPath);break;
		case 16: Searcher sr = new Searcher(newRow,newCol,newPath);break;
		case 17: Searcher ss = new Searcher(newRow,newCol,newPath);break;
		case 18: Searcher st = new Searcher(newRow,newCol,newPath);break;
		case 19: Searcher su = new Searcher(newRow,newCol,newPath);break;
		case 20: Searcher sv = new Searcher(newRow,newCol,newPath);break;
		default: System.out.println("Out of searchers");

		}
		
	}
}
