import java.awt.Point;
import java.util.ArrayList;
import java.util.Scanner;

public class Path {
	static int searchers=0;
	static int r;
	static int c;
	public static int[][] l;
	public static void main(String[] args) {

		int Row=0, Col=0,m;
		Scanner sc = new Scanner(System.in);
		System.out.print("row count:");
		r = sc.nextInt();
		
		System.out.print("column count:");
		c = sc.nextInt();
		
		l = new int[r][c];
		for (int i=0;i<r;i++)
			for (int j=0;j<c;j++)
				l[i][j] = sc.nextInt();
		int i,j;
		for (i=0; i<r; i++) {
			for (j=0; j<c; j++)
				System.out.print(l[i][j] + "\t");
			System.out.println();
		}
		
		System.out.print("method number (1-3):");
		m = sc.nextInt();
		
		sc.close();
		
		switch (m) {
		case 1: 	// 1. algoritms
			
			boolean up,down,left,right;
			int prevRow=r,prevCol=c,b=0, fail=0,t=0;
			
			if (l[Row][Col]==1 || l[r-1][c-1]==1) {System.out.println("No path available"); return;}
			System.out.println("Path:");
			
			while(true){
				t++;
				if(Row+1==r && Col+1==c) break;
				up=false;
				down=false;
				right=false;
				left=false;
				
				int rand = (int)(Math.random()*4);
				
				if (Row+1<r && 
						l[Row+1][Col] == 0 && 
						!(String.valueOf(prevRow)+String.valueOf(prevCol)).equals(String.valueOf(Row+1)+String.valueOf(Col))) 
					down=true;
				
				if (Row>0 &&
						l[Row-1][Col] == 0 && 
						!(String.valueOf(prevRow)+String.valueOf(prevCol)).equals(String.valueOf(Row-1)+String.valueOf(Col)))
					up=true;
				
				if (Col>0 &&
					l[Row][Col-1] == 0 && 
						!(String.valueOf(prevRow)+String.valueOf(prevCol)).equals(String.valueOf(Row)+String.valueOf(Col-1))) 
					left=true; 
				
				if (Col+1<c && 
						l[Row][Col+1] == 0 && 
						!(String.valueOf(prevRow)+String.valueOf(prevCol)).equals(String.valueOf(Row)+String.valueOf(Col+1)))
					right=true;
				if ((!down && !up && !right && !left) || t==r*c){
					Row=0;
					Col=0;
					prevRow=r;
					prevCol=c;
					fail++;
					t=0;
					if(fail==10){
						System.out.println("Cannot find finish.");
						return;
					}
					continue;
				}
				prevRow=Row;
				prevCol=Col;
				
				b=0;
				while (b==0){
					switch (rand) {
						case 0:
							if(down){
								Row++;
								System.out.print("("+Row+","+Col+") ");
								b++;
								break;
							}
						case 1:
							if(up){
								Row--;
								System.out.print("("+Row+","+Col+") ");
								b++;
								break;
							}
						case 2:
							if(left){
								Col--;
								System.out.print("("+Row+","+Col+") ");
								b++;
								break;
							}
						case 3:
							if(right){
								Col++;
								System.out.print("("+Row+","+Col+") ");
								b++;
								break;
							}
						default: rand = (int)(Math.random()*4);
						continue;
					}
				}	
			}
			
			break;
		case 2: 
			
			int o=1,s=2,x=0;
			if (l[Row][Col] == 1 || l[r-1][c-1]==1) {System.out.println("No path available"); return;}
			System.out.println("Path:");
			
			while(true){

				if(Row+1==r && Col+1==c) break;
				
				if(x>c*r){
					System.out.println("Cannot find a valid path");
					break;
				}
				System.out.println("o: "+i+" s: "+s);
				if ((o == 1 || s == 1) && Row + 1 != r && l[Row+1][Col] == 0) {
					Row++;
					o=1;
					s=4; 
					x++;
					System.out.print("("+Row+","+Col+") ");
					continue;
				}
				
				if ((o == 2 || s == 2) && Col + 1 != c && l[Row][Col+1] == 0) {
					Col++;
					o=2;
					s=1;
					x++;
					System.out.print("("+Row+","+Col+") "); 
					continue;
				}
				
				if ((o == 4 || s == 4) && Col > 0 && l[Row][Col-1] == 0) {
					Col--;
					o=4; 
					s=3; 
					x++;
					System.out.print("("+Row+","+Col+") ");
					continue;
				}
				
				if ((o == 3 || s == 3) && Row > 0 && l[Row-1][Col] ==0) {
					Row--;
					o=3; 
					s=2; 
					x++;
					System.out.print("("+Row+","+Col+") "); 
					continue;
				}

				if (o == 4) o = 0;
				else o++;
				
				if (s == 4) s = 0;
				else s++;
			}
			
			break;
		
		case 3:
			Searcher a = new Searcher(0,0,"(0,0) ");
			break;
		}
	}
}
